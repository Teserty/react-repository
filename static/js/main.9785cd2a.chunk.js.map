{"version":3,"sources":["serviceWorker.js","components/Loading.jsx","components/user/FullUserInformation.jsx","components/user/loginedUser.jsx","components/repo/repoPre.jsx","components/RepoList.jsx","components/user/userPre.jsx","components/UserList.jsx","components/ListWithSearch.jsx","App.js","reducers/page.js","reducers/user.js","reducers/index.js","store/configureStore.js","components/InitialComponent.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Progress","props","undefined","withValue","CircularProgress","color","variant","value","progress","FullUserInformation","query","gql","login","useQuery","loading","data","content","info","user","Fragment","Avatar","src","avatarUrl","List","ListItem","createdAt","company","bio","name","Container","message","UserPage","repoQuery","to","viewer","PreviewRepository","totalCount","id","viewerHasStarred","add_star","remove_star","useMutation","addStar","removeStar","useState","count","setCount","ListItemText","ListItemAvatar","alt","onClick","RepoList","list","search","nodes","map","element","key","stargazers","owner","PreviewUserInformation","UserList","Divider","ListWithSearch","isUserSearch","setName","setList","TextField","onChange","event","target","Select","defaultValue","MenuItem","IconButton","connect","store","photos","page","exact","path","component","OverFullUserInformation","initialState","year","rootReducer","combineReducers","createStore","InitialComponent","t_token","token","setToken","httpLink","uri","headers","authorization","client","ApolloClient","link","HttpLink","cache","InMemoryCache","label","Button","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9785cd2a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport { CircularProgress } from '@material-ui/core';\r\nconst Progress = (props) => {\r\n    if(props.withValue === undefined){\r\n    return(\r\n        <CircularProgress color=\"secondary\" />\r\n    )}else{\r\n        return(\r\n        <CircularProgress variant=\"determinate\" value={props.progress} />  \r\n    )}\r\n    \r\n}\r\nexport default Progress","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport Progress from \"../Loading\";\r\nimport { Container, Avatar, List, ListItem } from '@material-ui/core';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nconst FullUserInformation = (props)=>{\r\n    const query = gql`\r\n    query{\r\n        user(login: \"${props.login}\") {\r\n          login\r\n          avatarUrl\r\n          createdAt\r\n          company\r\n          bio\r\n          name\r\n          location\r\n          followers(first: 10) {\r\n            nodes {\r\n              avatarUrl\r\n              id\r\n              login\r\n              name\r\n            }\r\n          }\r\n          projects(first: 10) {\r\n            nodes {\r\n              name\r\n              owner {\r\n                ... on User {\r\n                  id\r\n                  login\r\n                  name\r\n                }\r\n                ... on Organization {\r\n                  id\r\n                  login\r\n                  name\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }`\r\n    const {loading, error, data} = useQuery(query);\r\n    let content = \"\";\r\n    if(!loading && !error){\r\n        const info = data.user\r\n        content = \r\n        <React.Fragment>\r\n            <Avatar src={info.avatarUrl}/>\r\n            <List>\r\n                <ListItem>Login: {info.login}</ListItem>\r\n                <ListItem>Created at:{info.createdAt}</ListItem>\r\n                <ListItem>Company: {info.company}</ListItem>\r\n                <ListItem>Bio: {info.bio}</ListItem>\r\n                <ListItem>Name: {info.name}</ListItem>\r\n                <ListItem>Location: {info.location}</ListItem>\r\n            </List>\r\n        </React.Fragment>\r\n    }\r\n    return(\r\n        <Container>\r\n        {content}\r\n        {loading&& (<div><Progress/></div>)}\r\n        {error && <div>Error! {error.message}</div>}\r\n        </Container>\r\n    )\r\n}\r\n/*<ListItemText primary={data.viewer.repositories.totalCount} secondary=\"total repositories\"/>*/\r\nexport default FullUserInformation","import React from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Progress from \"../Loading\"\r\nimport FullUserInformation from './FullUserInformation'\r\nimport { Link } from 'react-router-dom'\r\nconst UserPage = (props) =>{\r\n    const repoQuery = gql`\r\n        {\r\n            viewer{\r\n                    login\r\n            }\r\n        }`\r\n    const {loading, error, data} = useQuery(repoQuery);\r\n    if (loading) \r\n        return (<div><Progress/></div>);\r\n    if (error) \r\n        return (<div>`Error! ${error.message}`</div>);\r\n    return(\r\n        <React.Fragment>\r\n            <Link to=\"/\">Search...</Link>\r\n            <FullUserInformation login={data.viewer.login}/>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default UserPage","import React, {useState} from 'react';\r\nimport {ListItemText, ListItemAvatar, Avatar, ListItem} from '@material-ui/core';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nconst PreviewRepository = ({name, totalCount, login, id, viewerHasStarred})=>{\r\n    const add_star = gql`\r\n        mutation{\r\n            addStar(input: { starrableId: \"${id}\" }) {\r\n                starrable {\r\n                    id\r\n                    viewerHasStarred\r\n                }\r\n            }\r\n        }\r\n    `;\r\n    const remove_star = gql`\r\n        mutation{\r\n            removeStar(input: {starrableId: \"${id}\"}) {\r\n            starrable {\r\n                id\r\n                viewerHasStarred\r\n            }\r\n            }\r\n        }\r\n    `;  \r\n    const [addStar]= useMutation(add_star)\r\n    const [removeStar]= useMutation(remove_star)\r\n    const [count, setCount] = useState(totalCount)\r\n    return(\r\n        <ListItem>\r\n            <ListItemText>{name}, {login}</ListItemText>\r\n            <ListItemAvatar>\r\n                {count}\r\n                {!viewerHasStarred && <Avatar src=\"./black-star.png\" alt=\"Remy Sharp\" onClick={()=>{addStar(); setCount(count+1)}}/>}\r\n                {viewerHasStarred && <Avatar src=\"./gold-star.png\" alt=\"Remy Sharp\" onClick={()=>{removeStar(); setCount(count+-1)}}/>}\r\n            </ListItemAvatar>\r\n        </ListItem>\r\n    )\r\n}\r\nexport default PreviewRepository","import React from \"react\"\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Progress from \"./Loading\";\r\nimport { Container, List } from '@material-ui/core';\r\nimport PreviewRepository from \"./repo/repoPre\"\r\n\r\nconst RepoList = ({name})=>{\r\n    const query = gql`\r\n        query {\r\n        search(query: \"${name}\", type: REPOSITORY, first: 50) {\r\n          nodes {\r\n            ... on Repository {\r\n              name\r\n              id\r\n              url\r\n              viewerHasStarred\r\n              stargazers{\r\n                totalCount\r\n              }\r\n              owner {\r\n                login\r\n              }\r\n            }\r\n          }\r\n        }\r\n    }`\r\n    const {loading, error, data} = useQuery(query);\r\n    let list = ''\r\n    if(!loading && !error){\r\n        const listOfData = data.search.nodes\r\n        list = listOfData.map((element, key)=> {\r\n            return <PreviewRepository key={key} name={element.name} id = {element.id} viewerHasStarred={element.viewerHasStarred}\r\n            totalCount = {element.stargazers.totalCount} login={element.owner.login} avatarUrl={element.avatarUrl}\r\n            />\r\n        })\r\n    }\r\n    return(\r\n        <Container>\r\n            Repos\r\n            <List>{list}</List>\r\n            {loading&& (<div><Progress/></div>)}\r\n            {error && <div>Error! {error.message}</div>}\r\n        </Container>\r\n    )\r\n}\r\nexport default RepoList","import React from 'react';\r\nimport {ListItemText, ListItemAvatar, Avatar} from '@material-ui/core';\r\nconst PreviewUserInformation = ({name, avatarUrl, login})=>{\r\n    if(name === \"\"){\r\n        name = login\r\n    }\r\n    return(\r\n        <div>\r\n            <ListItemAvatar>\r\n                <Avatar  src={avatarUrl} alt=\"Remy Sharp\"/>\r\n            </ListItemAvatar>\r\n            <ListItemText>{name}</ListItemText>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default PreviewUserInformation","import React from \"react\"\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Progress from \"./Loading\";\r\nimport PreviewUserInformation from \"./user/userPre\"\r\nimport {Container, Divider, ListItem, List } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom'\r\nconst UserList = ({name})=>{\r\n    const query = gql`\r\n    query{\r\n        search(query: \"${name}\", type: USER, first: 50) {\r\n            nodes {\r\n                __typename\r\n                ... on User {\r\n                  name\r\n                  login\r\n                  avatarUrl\r\n                  id\r\n                }\r\n                ... on Organization {\r\n                    id\r\n                    login\r\n                    name\r\n                    avatarUrl\r\n                  }\r\n              }\r\n          }\r\n    }`\r\n    const {loading, error, data} = useQuery(query);\r\n    let list = ''\r\n    if(!loading && !error){\r\n        const listOfData = data.search.nodes\r\n        list = listOfData.map((element, key)=> {\r\n            return(  <ListItem key={key}>\r\n                                <PreviewUserInformation  login={element.login} name={element.name} avatarUrl={element.avatarUrl}/>\r\n                                <Link to={`/user/${element.login}`}>More...</Link>\r\n                                <Divider variant=\"fullWidth\"/>\r\n                                \r\n                    </ListItem>\r\n            )\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            Users\r\n            <List>{list}</List>\r\n            {loading&& (<div><Progress/></div>)}\r\n            {error && <div>Error! {error.message}</div>}\r\n        </Container>\r\n    )\r\n}\r\nexport default UserList","import React, {useState} from \"react\"\r\nimport {TextField, Select, MenuItem, IconButton, Container } from '@material-ui/core';\r\nimport RepoList from \"./RepoList\"\r\nimport UserList from \"./UserList\"\r\nimport { Link } from 'react-router-dom'\r\nconst ListWithSearch = (props)=>{\r\n    let isUserSearch = true;\r\n    const [name, setName] = useState('twitter')\r\n    const [list, setList] = useState(<RepoList name={name}/>)\r\n    const selectorChange = (event) => {\r\n        event.target.value === \"user\"? isUserSearch = true: isUserSearch = false \r\n        console.log(isUserSearch)\r\n        if(isUserSearch){\r\n            setList(<UserList name={name}/>)\r\n        }else{\r\n            setList(<RepoList name={name}/>)\r\n        }\r\n    }\r\n    return(\r\n        <Container>\r\n            <Container>\r\n               \r\n                <TextField variant=\"outlined\" value={name} onChange={event => {\r\n                    setName(event.target.value)\r\n            }}/>\r\n                <Select defaultValue=\"repo\" onChange={selectorChange}>\r\n                <MenuItem value=\"user\" >\r\n                    <em>Users</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"repo\">\r\n                    <em>Repos</em>\r\n                </MenuItem>\r\n                </Select>\r\n                <IconButton onClick={() => {}}>Search</IconButton>\r\n            </Container>\r\n            <Link to=\"/user/\">Home...</Link>\r\n            {list}\r\n        </Container>\r\n    )\r\n}\r\nexport default ListWithSearch","import React from 'react';\nimport './App.css';\nimport UserPage from './components/user/loginedUser'\nimport ListWithSearch from './components/ListWithSearch'\nimport { connect } from 'react-redux'\nimport OverFullUserInformation from './components/user/FullUserInformation'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nconst App = (props) => {\n        return ( \n            <BrowserRouter >\n                <Switch >\n                    <Route exact path = \"/\" component={ListWithSearch}/>\n                    <Route path=\"/user/:login\" component={OverFullUserInformation}/>\n                    <Route path=\"/user/\" component={UserPage}/>\n                </Switch> \n            </BrowserRouter>\n        );\n    \n}\n\nconst mapStateToProps = (store) => {\n    return {\n        user: store.user,\n        photos: store.page\n    }\n}\nexport default connect(mapStateToProps)(App)","const initialState = {\r\n    year: 2018,\r\n    photos: [],\r\n}\r\n  \r\nexport function pageReducer(state = initialState) {\r\n    return state\r\n}","const initialState = {\r\n    name: 'Аноним',\r\n  }\r\n  \r\nexport function userReducer(state = initialState) {\r\n    return state\r\n}","import { combineReducers } from 'redux'\r\nimport { pageReducer } from './page'\r\nimport { userReducer } from './user'\r\n\r\nexport const rootReducer = combineReducers({\r\n  page: pageReducer,\r\n  user: userReducer,\r\n})","import { createStore } from 'redux'\r\nimport { rootReducer } from '../reducers'\r\n\r\nexport const store = createStore(rootReducer)","import React, {useState} from 'react'\r\nimport App from '../App';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport {TextField, Button} from \"@material-ui/core/\"\r\nimport { store } from '../store/configureStore'\r\nimport { Provider } from 'react-redux'\r\nconst InitialComponent = (props)=>{\r\n    let t_token;\r\n    const [token, setToken] = useState(\"\");\r\n    const httpLink = {\r\n        uri: 'https://api.github.com/graphql',\r\n        headers: {\r\n            authorization: `Bearer ${token}`\r\n        }\r\n    };\r\n    const client = new ApolloClient({\r\n        link: new HttpLink(httpLink),\r\n        cache: new InMemoryCache()\r\n    });\r\n    if(token === \"\"){\r\n        return(\r\n            <div>\r\n                <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" value={t_token} onChange={(event)=> {t_token=event.target.value}}/>\r\n                <Button variant=\"contained\" onClick={()=>{setToken(t_token)}}>Accept Token</Button>\r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n        <Provider store = { store } >\r\n            <ApolloProvider client = { client } >\r\n            <App token = { token }/> \r\n            </ApolloProvider>\r\n        </Provider>\r\n    )}\r\n}\r\nexport default InitialComponent","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport InitialComponent from \"./components/InitialComponent\"\n\n\nReactDOM.render(\n    <InitialComponent/>\n    , document.getElementById('root'));\nserviceWorker.register();"],"sourceRoot":""}